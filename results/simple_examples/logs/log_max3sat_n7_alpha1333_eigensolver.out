alpha 1.333 not possible, using alpha=1.3333333333333333 instead  with 3 variables and 4 clauses
SAT Formula:
[((1, False), (2, True), (0, False)), ((2, False), (1, True), (0, True)), ((2, False), (0, True), (1, True)), ((1, True), (2, True), (0, False))]
SAT formula converted to QUBO: 
[[ 1.   1.5 -2.   0.5 -0.5 -0.5  0.5]
 [ 1.5  0.  -1.   0.5 -0.5 -0.5 -0.5]
 [-2.  -1.   3.  -0.5  0.5  0.5 -0.5]
 [ 0.5  0.5 -0.5  0.   0.   0.   0. ]
 [-0.5 -0.5  0.5  0.   1.   0.   0. ]
 [-0.5 -0.5  0.5  0.   0.   1.   0. ]
 [ 0.5 -0.5 -0.5  0.   0.   0.   1. ]]
./qubos/3sat_7qubits_n3_m4_alpha13333333333333333
computing minimum eigenvalue for SparsePauliOp(['IIIIIIZ', 'IIIIIZI', 'IIIZIII', 'IIZIIII', 'IZIIIII', 'ZIIIIII', 'IIIIIZZ', 'IIIIZIZ', 'IIIIZZI', 'IIIZIIZ', 'IIIZIZI', 'IIIZZII', 'IIZIIIZ', 'IIZIIZI', 'IIZIZII', 'IZIIIIZ', 'IZIIIZI', 'IZIIZII', 'ZIIIIIZ', 'ZIIIIZI', 'ZIIIZII'],
              coeffs=[-0.0625    +0.j,  0.0625    +0.j, -0.0625    +0.j, -0.0625    +0.j,
 -0.0625    +0.j, -0.0625    +0.j,  0.0625    +0.j, -0.08333333+0.j,
 -0.04166667+0.j,  0.02083333+0.j,  0.02083333+0.j, -0.02083333+0.j,
 -0.02083333+0.j, -0.02083333+0.j,  0.02083333+0.j, -0.02083333+0.j,
 -0.02083333+0.j,  0.02083333+0.j,  0.02083333+0.j, -0.02083333+0.j,
 -0.02083333+0.j])
Eigenvalue:[-0.4375+0.j]; Eigenstate: [Statevector([0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,
             0.+0.j, 0.+0.j],
            dims=(2, 2, 2, 2, 2, 2, 2))]
saving results as json in ./results/reproduction/max3sat/easy/eigensolver...
